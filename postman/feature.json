{
	"info": {
		"_postman_id": "45d5c4b6-42d1-439a-a0c2-c16d5cf3f090",
		"name": "Test Explore with me - Comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22827680"
	},
	"item": [
		{
			"name": "Comment",
			"item": [
				{
					"name": "Добавление нового комментария",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let comment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(user.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const commentUser = await api.addUser(rnd.getUser());\r",
									"        pm.environment.set('commentUser', commentUser);\r",
									"        const requestToJoin = await api.publishParticipationRequest(event.id, commentUser.id);\r",
									"        pm.collectionVariables.set('uid', commentUser.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"        comment = rnd.getComment(commentUser.id, event.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body={\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(comment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    };\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
									"    pm.response.to.have.status(201);  \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});\r",
									"\r",
									"const source = JSON.parse(pm.request.body.raw);\r",
									"const target = pm.response.json();\r",
									"\r",
									"const commentUser = pm.environment.get('commentUser');\r",
									"\r",
									"pm.test(\"Комментарий должен содержать поля: id, text, authorName, created\", function () {\r",
									"    pm.expect(target).to.have.property('id');\r",
									"    pm.expect(target).to.have.property('text');\r",
									"    pm.expect(target).to.have.property('authorName');\r",
									"    pm.expect(target).to.have.property('created');\r",
									"});\r",
									"\r",
									"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
									"    pm.expect(source.text).equal(target.text, 'Текст сохраненного комментария должен соответствовать тексту в запросе');\r",
									"    pm.expect(commentUser.name).equal(target.authorName, 'Имя комментатора в сохраненном комментари должно соответствовать имени пользователя, добавившего комментарий');\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(user.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const commentUser = await api.addUser(rnd.getUser());\r",
									"        const requestToJoin = await api.publishParticipationRequest(event.id, commentUser.id);\r",
									"        let comment = await api.addComment(commentUser.id, event.id, rnd.getComment(commentUser.id, event.id));\r",
									"        const foundedEvent = await api.findEvent(event.id);\r",
									"        pm.collectionVariables.set('response', foundedEvent);\r",
									"        pm.collectionVariables.set('uid', commentUser.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"        pm.collectionVariables.set('commid', comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const userId = pm.collectionVariables.get('uid');\r",
									"const eventId = pm.collectionVariables.get('eid');\r",
									"const commentId = pm.collectionVariables.get('commid');\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(source.comments.length).to.eql(1);\r",
									"    pm.expect(source.comments[0].id.toString()).to.eql(commentId.toString());\r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/events/\" + eventId,\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
									"        pm.expect(response.json().comments.length).to.eql(0);\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commentId",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Удаление комментария администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(user.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const commentUser = await api.addUser(rnd.getUser());\r",
									"        const requestToJoin = await api.publishParticipationRequest(event.id, commentUser.id);\r",
									"        let comment = await api.addComment(commentUser.id, event.id, rnd.getComment(commentUser.id, event.id));\r",
									"        const foundedEvent = await api.findEvent(event.id);\r",
									"        pm.collectionVariables.set('response', foundedEvent);\r",
									"        pm.collectionVariables.set('uid', commentUser.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"        pm.collectionVariables.set('commid', comment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});\r",
									"const source = pm.collectionVariables.get('response');\r",
									"const userId = pm.collectionVariables.get('uid');\r",
									"const eventId = pm.collectionVariables.get('eid');\r",
									"const commentId = pm.collectionVariables.get('commid');\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(source.comments.length).to.eql(1);\r",
									"    pm.expect(source.comments[0].id.toString()).to.eql(commentId.toString());\r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/events/\" + eventId,\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    pm.test(\"Комментарий должен быть удалён после выполнения запроса\", function(){\r",
									"        pm.expect(response.json().comments.length).to.eql(0);\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commentId",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение комментария пользователем",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let newComment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(user.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const commentUser = await api.addUser(rnd.getUser());\r",
									"        const requestToJoin = await api.publishParticipationRequest(event.id, commentUser.id);\r",
									"        let oldComment = await api.addComment(commentUser.id, event.id, rnd.getComment(commentUser.id, event.id));\r",
									"        const foundedEvent = await api.findEvent(event.id);\r",
									"        newComment = rnd.getComment(commentUser.id, event.id);\r",
									"        pm.collectionVariables.set('oldComment', oldComment);\r",
									"        pm.collectionVariables.set('eventWithComment', foundedEvent);\r",
									"        pm.collectionVariables.set('uid', commentUser.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"        pm.collectionVariables.set('commid', oldComment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body={\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(newComment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    };\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const oldComment = pm.collectionVariables.get('oldComment');\r",
									"const eventWithComment = pm.collectionVariables.get('eventWithComment');\r",
									"const target = pm.response.json();\r",
									"const userId = pm.collectionVariables.get('uid');\r",
									"const eventId = pm.collectionVariables.get('eid');\r",
									"const commentId = pm.collectionVariables.get('commid');\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(eventWithComment.comments.length).to.eql(1);\r",
									"    pm.expect(eventWithComment.comments[0].id.toString()).to.eql(commentId.toString());\r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/events/\" + eventId,\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    const newComment = response.json().comments[0];\r",
									"    pm.test(\"Комментарий должен содержать поля: id, text, authorName, created\", function () {\r",
									"        pm.expect(target).to.have.property('id');\r",
									"        pm.expect(target).to.have.property('text');\r",
									"        pm.expect(target).to.have.property('authorName');\r",
									"        pm.expect(target).to.have.property('created');\r",
									"    });\r",
									"    pm.test(\"Комментарий должен быть изменен после выполнения запроса\", function(){\r",
									"        pm.expect(newComment.text).equal(target.text, 'Текст измененного комментария должен соответствовать тексту в запросе');\r",
									"    });\r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в комментарии до изменения\", function () {\r",
									"        pm.expect(oldComment.authorName).equal(target.authorName, 'Имя комментатора в измененном комментари должно соответствовать имени пользователя, добавившего комментарий');\r",
									"        pm.expect(oldComment.id).equal(target.id, 'Id комментария в измененном комментарии должно соответствовать Id комментария до изменения');\r",
									"        pm.expect(new Date(oldComment.created).toString()).equal(new Date(target.created).toString(), 'Дата комментария в измененном комментарии должно соответствовать дате комментария до изменения');\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{uid}}"
								},
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commentId",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Изменение комментария администратором",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let newComment;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUser());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        let eventBody = rnd.getEvent(category.id);\r",
									"        let event = await api.addEvent(user.id, eventBody);\r",
									"        event = await api.publishEvent(event.id);\r",
									"        const commentUser = await api.addUser(rnd.getUser());\r",
									"        const requestToJoin = await api.publishParticipationRequest(event.id, commentUser.id);\r",
									"        let oldComment = await api.addComment(commentUser.id, event.id, rnd.getComment(commentUser.id, event.id));\r",
									"        const foundedEvent = await api.findEvent(event.id);\r",
									"        newComment = rnd.getComment(commentUser.id, event.id);\r",
									"        pm.collectionVariables.set('oldComment', oldComment);\r",
									"        pm.collectionVariables.set('eventWithComment', foundedEvent);\r",
									"        pm.collectionVariables.set('uid', commentUser.id);\r",
									"        pm.collectionVariables.set('eid', event.id);\r",
									"        pm.collectionVariables.set('commid', oldComment.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body={\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(newComment),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    };\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const oldComment = pm.collectionVariables.get('oldComment');\r",
									"const eventWithComment = pm.collectionVariables.get('eventWithComment');\r",
									"const target = pm.response.json();\r",
									"const userId = pm.collectionVariables.get('uid');\r",
									"const eventId = pm.collectionVariables.get('eid');\r",
									"const commentId = pm.collectionVariables.get('commid');\r",
									"\r",
									"pm.test(\"Комментарий должен быть найден до выполнения запроса\", function(){\r",
									"    pm.expect(eventWithComment.comments.length).to.eql(1);\r",
									"    pm.expect(eventWithComment.comments[0].id.toString()).to.eql(commentId.toString());\r",
									"});\r",
									"let body\r",
									"const req = {\r",
									"                url: \"http://localhost:8080/events/\" + eventId,\r",
									"                method: \"GET\",\r",
									"                body: body == null ? \"\" : JSON.stringify(body),\r",
									"                header: { \"Content-Type\": \"application/json\" },\r",
									"            };\r",
									"\r",
									"pm.sendRequest(req, (error, response) => {\r",
									"    const newComment = response.json().comments[0];\r",
									"    pm.test(\"Комментарий должен содержать поля: id, text, authorName, created\", function () {\r",
									"        pm.expect(target).to.have.property('id');\r",
									"        pm.expect(target).to.have.property('text');\r",
									"        pm.expect(target).to.have.property('authorName');\r",
									"        pm.expect(target).to.have.property('created');\r",
									"    });\r",
									"    pm.test(\"Комментарий должен быть изменен после выполнения запроса\", function(){\r",
									"        pm.expect(newComment.text).equal(target.text, 'Текст измененного комментария должен соответствовать тексту в запросе');\r",
									"    });\r",
									"    pm.test(\"Данные в ответе должны соответствовать данным в комментарии до изменения\", function () {\r",
									"        pm.expect(oldComment.authorName).equal(target.authorName, 'Имя комментатора в измененном комментари должно соответствовать имени пользователя, добавившего комментарий');\r",
									"        pm.expect(oldComment.id).equal(target.id, 'Id комментария в измененном комментарии должно соответствовать Id комментария до изменения');\r",
									"        pm.expect(new Date(oldComment.created).toString()).equal(new Date(target.created).toString(), 'Дата комментария в измененном комментарии должно соответствовать дате комментария до изменения');\r",
									"    });\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/admin/events/:eventId/comments/:commentId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"events",
								":eventId",
								"comments",
								":commentId"
							],
							"variable": [
								{
									"key": "eventId",
									"value": "{{eid}}"
								},
								{
									"key": "commentId",
									"value": "{{commid}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async addComment(userId, eventId, comment, verbose=null) {",
					"        return this.post('/users/' + userId + '/events/' + eventId + '/comments', comment, \"Ошибка при добавлении нового комментария к событию\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getComment() {",
					"        return {",
					"            text: pm.variables.replaceIn('{{$randomLoremParagraph}}')",
					"        };",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "name",
			"value": ""
		},
		{
			"key": "usersCount",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "request_body",
			"value": ""
		},
		{
			"key": "mail",
			"value": ""
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "uid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catname",
			"value": ""
		},
		{
			"key": "eid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "compid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "toCheck",
			"value": ""
		},
		{
			"key": "newDataToSet",
			"value": ""
		},
		{
			"key": "uid1",
			"value": ""
		},
		{
			"key": "reqid",
			"value": 1,
			"type": "number"
		},
		{
			"key": "catId",
			"value": ""
		},
		{
			"key": "commid",
			"value": "1",
			"type": "string"
		},
		{
			"key": "oldComment",
			"value": ""
		},
		{
			"key": "eventWithComment",
			"value": ""
		}
	]
}